/*--------------------------------------------------------------------------#
#  Jenkins running on remote EC2 AWS instance, remote webserver too         #
#  Need to install ssh plugins                                              #
#  Edit jenkins configuration to add remote server and ssh key              #
#  Its better to set "/" directory and define declaratively                 #
#  Create new pipeline, choose SCM using https                              #
#  Configure 1 slave (ubuntu), add ssh keys and go                          #
#  Here i just test my image on remote jenkins slave                        #
#                                                                           #
#  Select "Script path" in git repo /jenkins/docker_php_deploy/Jenkinsfile  #
#                                                                           #
#  Last update:        01.06.2023                                           #
#--------------------------------------------------------------------------*/
pipeline {
    agent { label 'slave-1' }
    environment {
        CI_IMAGE_NAME = 'web_container'
        CI_CONTAINER_NAME = 'test_container'
        CONTAINER_EXTERNAL_PORT = '8080'
        CD_IMAGE_REPO_USER = 'wood8'
        CD_IMAGE_NAME_VERSION = 'jenkins-cicd'
    }

    options {
        skipDefaultCheckout()
        timestamps()
    }

    stages {
        stage('Delete workspace before build starts') {
            steps {
                echo 'Deleting workspace dir'
                deleteDir()
            }
        }

        stage('Checkout') {
            steps {
                git(
                    url: 'https://github.com/gitwood8/jenkins-deploy-webpage.git',
                    branch: 'main'
                )
            }
        }

        stage('Build docker image') {
            steps {
                dir('jenkins/docker_php_deploy/docker/') {
                    sh "docker build -t ${env.CI_IMAGE_NAME} ."
                    sh "docker run -d --rm --name ${env.CI_CONTAINER_NAME} -p ${env.CONTAINER_EXTERNAL_PORT}:80 ${env.CI_IMAGE_NAME}"
                    sleep 20
                    sh "docker inspect --format='{{json .State.Health}}' \$(docker ps -q) | grep '\"Status\":\"healthy\"'"
                    sh 'curl ifconfig.me'
                    sleep 10 // time to check web
                    sh 'docker ps -qa | xargs docker stop'
                    sh 'docker images -qa | xargs docker rmi 2>/dev/null || true'
                    // SUCCESS TEST:
                    sh 'if [ \$(docker images -qa | wc -l) = "0" ]; then echo "Success"; else echo "Vse ploho"; fi'
                }
            }
        }
    }
}
